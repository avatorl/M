//M function to call OpenAI API
//Open AI API Docs: https://platform.openai.com/docs/api-reference/
//Get your API Key at https://platform.openai.com/api-keys
//Do not trust robots!

(system as text, prompt as text, optional model as text) =>

let

    //ENDPOINT /v1/chat/completions
    //gpt-4-turbo-preview
    //gpt-4
    //gpt-3.5-turbo

    _model = if model = null then "gpt-3.5-turbo" else model,

    _api_key = "<API_KEY>",
    _url_base = "https://api.openai.com/",
    _url_rel = "v1/chat/completions",

    ContentJSON ="{
    ""model"": """ & _model & """,
    ""messages"": [
      {
        ""role"": ""system"",
        ""content"": """ & system & """
      },
      {
        ""role"": ""user"",
        ""content"": """ & prompt & """
      }
    ]
  }",

    ContentBinary =  Text.ToBinary(ContentJSON),

    Source = Json.Document(
        Web.Contents(
            _url_base, 
            [
                RelativePath=_url_rel,
                Headers=[
                    #"Content-Type"="application/json", 
                    #"Authorization"="Bearer " & _api_key
                ],
                Content=ContentBinary
            ]
        )
    ),
  
    choice = Source[choices]{0},
    content = Table.SelectRows(Record.ToTable(choice[message]), each [Name] = "content")[Value]{0},
    reason = Table.SelectRows(Record.ToTable(choice), each [Name] = "finish_reason")[Value]{0},
    Result = {content, reason}// {content,reason} //reason="stop" means the API returned the full chat completion generated by the model without running into any limits
in
    Result
