// M function to call the OpenAI API for generating chat completions
// Parameters:
// user - The user's input or prompt to send to the OpenAI model
// system (optional) - The system's message to set context or behavior (optional)
// model (optional) - The model to use, e.g., "gpt-3.5-turbo" or "gpt-4" (default is "gpt-3.5-turbo")

(user as text, optional system as text, optional model as text) =>

let
    // Define the model to use; default to "gpt-3.5-turbo" if not provided
    _model = if model = null then "gpt-3.5-turbo" else model,

    // Prepare the system message if provided, otherwise leave it empty
    _system = if system = null then "" else "{
        ""role"": ""system"",
        ""content"": """ & system & """
      },",

    // Set your OpenAI API key here
    _api_key = "<API_KEY>",

    // Define the base URL and the specific API endpoint for chat completions
    _url_base = "https://api.openai.com/",
    _url_rel = "v1/chat/completions",

    // Construct the JSON body for the POST request
    ContentJSON = "{
        ""model"": """ & _model & """,
        ""messages"": [
          " & _system & "
          {
            ""role"": ""user"",
            ""content"": """ & user & """
          }
        ]
    }",

    // Convert the JSON content to binary format for the web request
    ContentBinary = Text.ToBinary(ContentJSON),

    // Send the POST request to the OpenAI API and parse the JSON response
    Source = Json.Document(
        Web.Contents(
            _url_base, 
            [
                RelativePath = _url_rel,
                Headers = [
                    #"Content-Type" = "application/json", 
                    #"Authorization" = "Bearer " & _api_key
                ],
                Content = ContentBinary
            ]
        )
    ),

    // Extract the first choice from the response (the generated message)
    choice = Source[choices]{0},

    // Extract the content of the message
    content = Table.SelectRows(Record.ToTable(choice[message]), each [Name] = "content")[Value]{0},

    // Extract the finish reason to understand why the API stopped generating text
    reason = Table.SelectRows(Record.ToTable(choice), each [Name] = "finish_reason")[Value]{0},

    // Return both the content and the reason as a list
    Result = {content, reason} // reason="stop" means the API returned the full chat completion generated by the model without running into any limits
in
    Result
